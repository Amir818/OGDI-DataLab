<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClientLibraries" xml:space="preserve">
    <value>Client Libraries</value>
  </data>
  <data name="ClientLibrariesText" xml:space="preserve">
    <value>Developers using &lt;a href="http://microsoft.com/vstudio/" target="_blank"&gt;Microsoft Visual Studio 2010&lt;/a&gt; (and above) can use &lt;a href="http://msdn.microsoft.com/en-us/data/bb931106.aspx" target="_blank"&gt;WCF Data Services&lt;/a&gt; to access data from OGDI DataLab through easy-to-use .NET classes. Within Visual Studio, this is accomplished by using the &lt;a href="http://msdn.microsoft.com/en-us/library/bb628652.aspx" target="_blank"&gt;Add Service Reference&lt;/a&gt; feature (see .NET samples on the OGDI DataLab’s Data Browser page &lt;a href="http://ogdifrance.cloudapp.net/DataBrowser/frOpenData/RennesPAV#param=NOFILTER--DataView--Results" taget="_blank"&gt;here&lt;/a&gt;). To make accessing OGDI DataLab data easier from their language of choice, developers can refer to the &lt;a href="http://www.odata.org/libraries/" target="_blank"&gt;various libraries&lt;/a&gt; listed on the OData web sites. Java developers can use for example &lt;a href="https://github.com/MSOpenTech/ODataJClient" target="_blank"&gt;ODataJClient&lt;/a&gt;. Conversely, PHP developers can take advantage of the &lt;a href="http://odataphp.codeplex.com/" target="_blank"&gt;OData SDK for PHP&lt;/a&gt;.</value>
  </data>
  <data name="DataFormat" xml:space="preserve">
    <value>Data Formats</value>
  </data>
  <data name="DataFormatText" xml:space="preserve">
    <value>&lt;h4&gt;AtomPub&lt;/h4&gt; 
&lt;p&gt;By default, OGDI DataLab returns data in the &lt;a href="http://www.odata.org/" target="_blank"&gt;Open Data Protocol (OData)&lt;/a&gt; format. This format extends the broadly adopted &lt;a href="http://bitworking.org/projects/atom/rfc5023.html" target="_blank"&gt;Atom Publishing Protocol&lt;/a&gt; and can be easily consumed by a variety of platforms, including Microsoft .NET, Java, Ruby, PHP, and Python. Refer to the code samples on the &lt;a href="http://ogdifrancex.cloudapp.net/DataBrowser/dc/CrimeIncidents#param=NOFILTER--DataView--Results" target="_blank"&gt;Data Browser&lt;/a&gt; page for examples. 
&lt;/p&gt;
&lt;h4&gt;JSON&lt;/h4&gt; 
&lt;p&gt;OGDI DataLab can also return data in the &lt;a href="http://en.wikipedia.org/wiki/JSON" target="_blank"&gt;JavaScript Object Notation (JSON)&lt;/a&gt; format, which can be conveniently consumed using JavaScript and other technologies. To return data in JSON format, simply append the format=json parameter to your query:&lt;/p&gt;
&lt;dd&gt;&lt;a href="http://ogdifrance.cloudapp.net:8080/v1/frOpenData/RennesPAV/?$filter=flux eq 'VE' &amp;format=json"&gt;http://ogdifrance.cloudapp.net:8080/v1/frOpenData/RennesPAV/?$filter=flux eq 'VE' &amp;format=json&lt;/a&gt; 
&lt;/dd&gt;&lt;br/&gt;
&lt;h4&gt;JSONP &lt;/h4&gt;
&lt;p&gt;
To mitigate security vulnerabilities associated with cross-site scripting attacks, Web browsers generally prevent client-side JavaScript applications originating in one network domain (for example, yourdomain.com) from making HTTP requests to other network domains (for example, the ogdi.cloudapp.net network domain that hosts the OGDI DataLab data services). This can prevent JavaScript applications hosted in another domain from making straight-forward calls to the OGDI DataLab data services, but there a variety of techniques that can be used, such as this widely-used IFRAMES-based technique.
 &lt;/p&gt;&lt;p&gt;
The OGDI DataLab's data service also provides direct support for the &lt;a href="http://en.wikipedia.org/wiki/JSON#JSONP" target="_blank"&gt;JSONP&lt;/a&gt; technique. Using this technique, OGDI DataLab's data services will call a callback function that you specify, passing in the results of your query in JSON format as an input format. To use this technique, issue a query with the following additional parameters: format=json&amp;callback=yourCallback, where yourCallback is the name of a JavaScript callback function defined on the Web page issuing the request. 
&lt;/p&gt;&lt;p&gt;
Refer to the JavaScript sample one the OGDI DataLab’s Data Browser page &lt;a href="http://ogdifrance.cloudapp.net/DataBrowser/frOpenData/RennesPAV#param=NOFILTER--DataView--Results" target="_blank"&gt;here&lt;/a&gt; for an example of using JSONP with OGDI DataLab. In that sample, the AdditionalDataLoaded() function is the JSONP callback function. 
&lt;/p&gt;
&lt;h4&gt;RDF&lt;/h4&gt; 
&lt;p&gt;
OGDI DataLab can also return data in the &lt;a href="http://en.wikipedia.org/wiki/Resource_Description_Framework" target="_blank"&gt;RDF (Resource Description Framework)&lt;/a&gt; format. RDF is a graph model for describing formally web resources and their associated metadata. Developed by W3C, RDF is a base language for semantic Web. To return data in RDF format, simply append the format=rdf parameter to your query: 
 &lt;/p&gt;
&lt;dd&gt;&lt;a href="
http://ogdifrance.cloudapp.net:8080/v1/frOpenData/RennesPAV/?$filter=flux eq 'VE' &amp;format=rdf" target="_blank"&gt;
http://ogdifrance.cloudapp.net:8080/v1/frOpenData/RennesPAV/?$filter=flux eq 'VE' &amp;format=rdf&lt;/a&gt; &lt;/dd&gt;&lt;br/&gt;
&lt;h4&gt;
Geospatial Data 
&lt;/h4&gt; 
&lt;p&gt;Many of the data sets in OGDI DataLab also include geospatial data, which is returned in the  &lt;a href="http://fr.wikipedia.org/wiki/Keyhole_Markup_Language" target="_blank"&gt;KML (Keyhole Markup Language)&lt;/a&gt;format. This format is compatible with popular desktop and Web-based mapping technologies including &lt;a href="http://www.google.com/earth/index.html" target="_blank"&gt;Google Earth&lt;/a&gt;, &lt;a href="https://maps.google.com/" target="_blank"&gt;Google Maps&lt;/a&gt;, ou encore &lt;a href="https://maps.yahoo.com/" target="_blank"&gt;Yahoo! Maps&lt;/a&gt;. 
To return geospatial data in KML format, append the format=kml parameter to your query. For example, to retrieve geospatial points in KML format for crime incidents in DC that occurred during the police department's evening shift: 
&lt;/p&gt;
&lt;dd&gt;&lt;a href="
http://ogdifrance.cloudapp.net:8080/v1/frOpenData/RennesPAV/?$filter=flux eq 'VE' &amp;format=kml "&gt;
http://ogdifrance.cloudapp.net:8080/v1/frOpenData/RennesPAV/?$filter=flux eq 'VE' &amp;format=kml&lt;/a&gt; &lt;/dd&gt;
&lt;p&gt;
Note that if the data set that you are using does not include any geospatial data, a KML query to OGDI DataLab will return an empty result set. 
&lt;/p&gt;
&lt;h4&gt;Paging&lt;/h4&gt; 
&lt;p&gt;
OGDI DataLab and the underlying Azure Table Storage service support paging through large sets of query results. The documentation for &lt;a href="http://msdn.microsoft.com/en-us/library/dd135718.aspx" target="_blank"&gt;Query Timeout and Pagination&lt;/a&gt; in the Azure Table Storage service provides a complete description of how OGDI DataLab and the underlying Azure platform support paging. You can also refer to the "C#/ASP.NET Paging" sample on the OGDI DataLab’s Data Browser page &lt;a href="http://ogdifrance.cloudapp.net/DataBrowser/frOpenData/RennesPAV#param=NOFILTER--DataView--Results" target="_blank"&gt;here&lt;/a&gt;, which demonstrates how to perform paged queries using the WCF Data Services client library. 
&lt;/p&gt;</value>
  </data>
  <data name="OverView" xml:space="preserve">
    <value>Overview</value>
  </data>
  <data name="OverViewText" xml:space="preserve">
    <value>The &lt;strong&gt;OGDI (Open Government Data Initiative) DataLab&lt;/strong&gt; platform leverages by defaut the &lt;a href="http://azure.microsoft.com/" target="_blank"&gt;Microsoft Azure Platform&lt;/a&gt;, an open cloud-based runtime and hosting environment helping developers to quickly and easily create, deploy, manage and run applications and Web services across the Internet. The Azure platform allows developers to focus on their core business: applications and Web services. Developers uses their own existing skills (NET, Ruby, Python, Java, PHP, etc.) and their current tools and IDEs (Visual Studio, Eclipse, etc.) to develop these applications and Web services and deploy them to the cloud. For more information, please go to the homepage of the &lt;a href="http://azure.microsoft.com/" target="_blank"&gt;Microsoft Azure Platform&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;
OGDI DataLab is written in C#, leveraging ASP.NET MVC and the .NET Framework. The data service in OGDI DataLab exposes data for programmatic access via a number of formats, including the standard &lt;a href="http://www.odata.org/documentation/" target="_blank"&gt;Open Data Protocol (OData)&lt;/a&gt;**, an extension to **&lt;a href="http://tools.ietf.org/html/rfc5023" target="_blank"&gt;Atom Publishing Protocol (AtomPub)&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/Keyhole_Markup_Language"  target"_blank"&gt;Keyhole Markup Language (KML)&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/JavaScript_Object_Notation" target="_blank"&gt;JavaScript Object Notation (JSON)&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/JavaScript_Object_Notation#JSONP" target="_blank"&gt;JSONP&lt;/a&gt;. OGDI DataLab uses jQuery and a variety of other open source components and enables users to browse and query published data.</value>
  </data>
  <data name="QueryingOGDI" xml:space="preserve">
    <value>Querying OGDI DataLab</value>
  </data>
  <data name="QueryingOGDIText" xml:space="preserve">
    <value>OGDI DataLab exposes data through &lt;a href="http://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank"&gt;REST&lt;/a&gt; web services. The basic format of an OGDI DataLab service call is &lt;br/&gt;http://&lt;strong&gt;project&lt;/strong&gt;.cloudapp.net[:8080]/v1/&lt;strong&gt;catalog&lt;/strong&gt;/&lt;strong&gt;dataset&lt;/strong&gt;?&lt;strong&gt;query&lt;/strong&gt;, where: 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;project&lt;/strong&gt; is the name of the deployment project for the OGDI DataLab platform in Azure (for example, "ogdifrance" for the testing instance provided by Microsoft France). Port 8080 is used starting with version 2013-06 (v6) of OGDI DataLab.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;catalog&lt;/strong&gt; is the name of the catalog/container (for example, "frOpenData" for the data sets in the default demo catalog).&lt;/li&gt; 
&lt;li&gt;&lt;strong&gt;dataset&lt;/strong&gt; is the name of the data set (for example, "RennesPAV" for the one of the data sets in the frOpenData container).&lt;/li&gt; 
&lt;li&gt;&lt;strong&gt;query&lt;/strong&gt; is your set of query parameters, expressed using a subset of the &lt;a href="http://www.odata.org/documentation/" target="_blank"&gt;OData query syntax&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt; 
Note that OGDI DataLab currently only supports the $top, $skip, $orderby, $filter and $top query options in the OData query syntax.&lt;/p&gt;&lt;p&gt; 
Also note that if a property has a null value for a particular entity in the data set, it will be omitted entirely from the result set returned by OGDI DataLab. Your (modern) application design should take this into account and handle potentially missing properties.</value>
  </data>
</root>