<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutPageHeading" xml:space="preserve">
    <value>&lt;h3&gt;About OGDI DataLab&lt;/h3&gt;</value>
  </data>
  <data name="AboutPageContent" xml:space="preserve">
    <value>&lt;p&gt;
 &lt;strong&gt;OGDI (Open Government Data Initiative) DataLab&lt;/strong&gt; is one of the accelerators of the turnkey &lt;strong&gt;solution Open Data in a box&lt;/strong&gt;, a Community initiative led by the Microsoft teams in charge of the &lt;a href="http://www.microsoft.com/government/ww/public-services/" target="_blank"&gt;Public Sector&lt;/a&gt; for providing a ready to use white label solution for Open Data that is complete, interoperable, open and scalable. The OGDI Datalab platform aims at facilitating both the publication and the use of public data from various public entities (government, ministries, local and regional authorities, cities, decentralized state services and government agencies, etc.). As a result, this platform allows to publish and consume on the Internet (multiple catalogs of) public data sets in an open format that encompasses and fulfills the fundamental principles of the Web. Thus, the OGDI Datalab’s data service along with the open programmatic interfaces (APIs) - based in particular on the &lt;a href="http://www.odata.org/documentation/" target="_blank"&gt;Odata&lt;/a&gt; standard - can be accessed by a wide variety of technologies used on the Internet today, such as ASP.NET, JavaScript, Flash, Flex, PHP, Python, Ruby, Silverlight, Objective-C (iPhone, iOS), Android, etc.
&lt;/p&gt;
&lt;p&gt;
Whether you are a Public Authority, a business company in contract with such an entity, a company wishing to use public information, or "citizen" developer, etc. open APIs allow you to build innovative modern applications, data advanced graphics and mash-ups that will benefit citizens, civil servants, and other users. This site relies on the default software components provided by the accelerator OGDI Datalab. It offers an interactive access to some publicly available open data sets with associated code samples and other resources for writing modern applications using the programming model implemented by OGDI Datalab.
&lt;/p&gt;
&lt;p&gt;
OGDI DataLab leverages the &lt;a href="http://azure.microsoft.com/" target="_blank"&gt;Microsoft Azure plateform&lt;/a&gt; in the cloud. OGDI DataLab is available on &lt;a href="https://github.com/openlab/OGDI-DataLab" target="_blank"&gt;GitHub&lt;/a&gt; under the open source &lt;a href="http://www.microsoft.com/france/openness/open-source/default.aspx" target="_blank"&gt;Microsoft Public License (Ms-PL)&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Please send us an email at &lt;a href="mailto:ogdifrance@live.fr"&gt;ogdifrance@live.fr&lt;/a&gt; if you have open that you want us to publish or if you have questions. 
&lt;/p&gt;</value>
  </data>
</root>